{"version":3,"sources":["webpack:///./src/templates/tags.js"],"names":["Tags","pageContext","data","location","siteTitle","site","siteMetadata","title","tag","allMarkdownRemark","edges","totalCount","tagHeader","map","node","slug","fields","frontmatter","key","to","pageQuery"],"mappings":"2FAAA,0HAkEeA,UA1DF,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC3BC,EAAYF,EAAKG,KAAKC,aAAaC,MACjCC,EAAQP,EAARO,IAFwC,EAGlBN,EAAKO,kBAA3BC,EAHwC,EAGxCA,MAAOC,EAHiC,EAGjCA,WACTC,EAAeD,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,iBAEEH,EAFF,IAGf,OACE,kBAAC,IAAD,CAAQL,SAAUA,GAChB,kBAAC,IAAD,CAAKI,MAAUC,EAAL,WACV,gCACE,4BAAKJ,IAEP,4BAAKQ,GACL,4BACGF,EAAMG,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACJC,EAASD,EAAKE,OAAdD,KACAR,EAAUO,EAAKG,YAAfV,MACR,OACE,wBAAIW,IAAKH,GACP,kBAAC,OAAD,CAAMI,GAAIJ,GAAOR,QASzB,kBAAC,OAAD,CAAMY,GAAG,SAAT,YACA,gCACE,kBAAC,IAAD,SA4BD,IAAMC,EAAS","file":"component---src-templates-tags-js-5ce368770b95f49dcf42.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Bio from \"../components/bio\";\nimport SEO from \"../components/seo\";\n\n// Components\nimport { Link, graphql } from \"gatsby\"\nimport Layout from \"../components/layout\";\nconst Tags = ({ pageContext, data, location }) => {\n  const siteTitle = data.site.siteMetadata.title;\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMarkdownRemark\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } tagged with \"${tag}\"`\n  return (\n    <Layout location={location}>\n      <SEO title={`${tag} posts`} />\n      <header>\n        <h1>{siteTitle}</h1>\n      </header>\n      <h1>{tagHeader}</h1>\n      <ul>\n        {edges.map(({ node }) => {\n          const { slug } = node.fields\n          const { title } = node.frontmatter\n          return (\n            <li key={slug}>\n              <Link to={slug}>{title}</Link>\n            </li>\n          )\n        })}\n      </ul>\n      {/*\n              This links to a page that does not yet exist.\n              You'll come back to it!\n            */}\n      <Link to=\"/tags\">All tags</Link>\n      <footer>\n        <Bio />\n      </footer>\n    </Layout>\n  )\n}\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\nexport default Tags\nexport const pageQuery = graphql`\n  query($tag: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}